// Ahmed Ibrahim Portfolio - Modern JavaScript Application
// Professional Portfolio with Arabic RTL Support - FIXED Navigation

class AhmedPortfolio {
    constructor() {
        this.data = {
            projects: [
                {
                    title: "EverPic",
                    description: "ÿ£ÿØÿßÿ© ÿ®ÿ±ŸÖÿ¨Ÿäÿ© ÿ™ŸÇŸàŸÖ ÿ®ÿ™ÿ≠ŸàŸäŸÑ ÿ£Ÿä ÿµŸàÿ±ÿ© ÿ®ÿ£Ÿä ÿµŸäÿ∫ÿ© ÿ•ŸÑŸâ ÿ±ÿßÿ®ÿ∑ ŸÖÿ®ÿßÿ¥ÿ± ŸÇÿßÿ®ŸÑ ŸÑŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÅŸä ÿßŸÑŸÖŸàÿßŸÇÿπ ŸàÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ÿå ŸÖŸÖÿß Ÿäÿ≥ŸáŸÑ ŸÖÿ¥ÿßÿ±ŸÉÿ© ÿßŸÑÿµŸàÿ± ÿπŸÑŸâ ÿßŸÑÿ•ŸÜÿ™ÿ±ŸÜÿ™ ÿØŸàŸÜ ÿßŸÑÿ≠ÿßÿ¨ÿ© ÿ•ŸÑŸâ ÿ±ŸÅÿπŸáÿß ÿ®ÿ¥ŸÉŸÑ ÿ™ŸÇŸÑŸäÿØŸä.",
                    category: "ÿ™ÿ∑ŸàŸäÿ± ŸàŸäÿ®",
                    image: "https://everpic-plus.preview.emergentagent.com/api/f/F0V1ChcY",
                    link: "https://everpic-plus.preview.emergentagent.com/",
                    tech: ["Python", "Flask / FastAPI", "HTML / CSS / JavaScript", "Amazon S3"],
                    features: [
                        "ÿØÿπŸÖ ÿ¨ŸÖŸäÿπ ÿµŸäÿ∫ ÿßŸÑÿµŸàÿ± ÿßŸÑÿ¥ÿßÿ¶ÿπÿ© (JPEG, PNG, GIF, WebP‚Ä¶)",
                        "ÿ•ŸÜÿ¥ÿßÿ° ÿ±Ÿàÿßÿ®ÿ∑ ŸÖÿ®ÿßÿ¥ÿ±ÿ© ŸÇÿßÿ®ŸÑÿ© ŸÑŸÑŸÜÿ¥ÿ± ŸÅŸä ÿßŸÑŸÖŸàÿßŸÇÿπ ŸàÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™",
                        "Ÿàÿßÿ¨Ÿáÿ© ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ÿ≥Ÿäÿ∑ÿ© ŸÑÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿµŸàÿ± ŸàÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿ±ÿßÿ®ÿ∑ ŸÅŸàÿ±ÿßŸã",
                        "ÿ•ŸÖŸÉÿßŸÜŸäÿ© ÿØŸÖÿ¨ ÿßŸÑÿÆÿØŸÖÿ© ŸÅŸä ÿ£ŸÜÿ∏ŸÖÿ© ŸàŸÖÿ¥ÿßÿ±Ÿäÿπ ÿ£ÿÆÿ±Ÿâ"
                    ],
                    challenges: "ÿ∂ŸÖÿßŸÜ ÿßÿ≥ÿ™ŸÇÿ±ÿßÿ± Ÿàÿ≥ÿ±ÿπÿ© ÿßŸÑÿ±Ÿàÿßÿ®ÿ∑ ŸÖÿπ ÿ£ÿ≠ÿ¨ÿßŸÖ ÿßŸÑÿµŸàÿ± ÿßŸÑŸÖÿÆÿ™ŸÑŸÅÿ©ÿå Ÿàÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ™ÿÆÿ≤ŸäŸÜ ÿ®ÿ¥ŸÉŸÑ ÿ¢ŸÖŸÜ ŸàŸÖŸÜÿπ ÿßŸÑÿ±Ÿàÿßÿ®ÿ∑ ÿßŸÑŸÖŸÜÿ™ŸáŸäÿ© ÿßŸÑÿµŸÑÿßÿ≠Ÿäÿ©",
                    results: "ÿ™ÿ≥ŸáŸäŸÑ ŸÖÿ¥ÿßÿ±ŸÉÿ© ÿßŸÑÿµŸàÿ± ÿπÿ®ÿ± ÿßŸÑÿ•ŸÜÿ™ÿ±ŸÜÿ™ Ÿàÿ™ÿ≠ÿ≥ŸäŸÜ ÿ™ÿ¨ÿ±ÿ®ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖÿå ŸÖÿπ ŸÇÿßÿ®ŸÑŸäÿ© ÿØŸÖÿ¨ ŸÖÿ±ŸÜÿ© ŸÖÿπ ÿ£ŸÜÿ∏ŸÖÿ© ŸÖÿ™ÿπÿØÿØÿ©"
                },
                {
                    title: "ŸÖŸÜÿµÿ© ÿßŸÑÿ™ÿ¨ÿßÿ±ÿ© ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿ© ‚Äì TURBO STORE",
                    description: "ŸÖÿ™ÿ¨ÿ± ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ŸÖÿ™ŸÉÿßŸÖŸÑ ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿ®Ÿäÿπ ÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ ÿßŸÑÿ£ŸÑÿπÿßÿ® ÿßŸÑÿ±ŸÇŸÖŸäÿ© ŸÖÿ´ŸÑ Xbox Game Pass Ultimateÿå ŸÖÿπ ŸÇÿ≥ŸÖ ŸÑŸÑÿ£ŸÑÿπÿßÿ® ÿßŸÑÿ±ŸÇŸÖŸäÿ© Ÿàÿ≥ŸÑÿ© ÿ∞ŸÉŸäÿ© ÿ™ÿ≠ŸÅÿ∏ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™.",
                    category: "ÿ™ÿ∑ŸàŸäÿ± ŸàŸäÿ®",
                    image: "https://everpic-plus.preview.emergentagent.com/api/f/Sk6Xkwej",
                    link: "https://turbo-store-8b47e.web.app/",
                    status: "ŸÇŸäÿØ ÿßŸÑÿ™ÿ∑ŸàŸäÿ±",
                    tech: ["HTML", "CSS", "JavaScript (React)", "Node.js", "MongoDB", "Stripe API"],
                    features: [
                        "Ÿàÿßÿ¨Ÿáÿ© ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ≠ÿØŸäÿ´ÿ© Ÿàÿ¨ÿ∞ÿßÿ®ÿ© ŸàŸÖÿ™ÿ¨ÿßŸàÿ®ÿ©",
                        "ŸÜÿ∏ÿßŸÖ ÿØŸÅÿπ ÿ¢ŸÖŸÜ Ÿàÿ≥ÿ±Ÿäÿπ ŸäÿØÿπŸÖ ŸÅŸäÿ≤ÿß Ÿàÿ∑ÿ±ŸÇ ÿØŸÅÿπ ŸÖÿ™ÿπÿØÿØÿ©",
                        "ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸàÿßŸÑÿ®ÿßŸÇÿßÿ™ ÿ®ÿ∑ÿ±ŸäŸÇÿ© ÿØŸäŸÜÿßŸÖŸäŸÉŸäÿ©",
                        "ÿ≥ŸÑÿ© ÿ∞ŸÉŸäÿ© ÿ™ÿ≠ŸÅÿ∏ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿ≠ÿ™Ÿâ ÿ®ÿπÿØ ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸÖÿ™ÿµŸÅÿ≠",
                        "ŸÇÿ≥ŸÖ ÿÆÿßÿµ ÿ®ÿπÿ±ÿ∂ ÿßŸÑÿ£ŸÑÿπÿßÿ® ÿßŸÑÿ±ŸÇŸÖŸäÿ© ÿ®ÿ¨ÿßŸÜÿ® ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™",
                        "ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿßŸÑÿ£ŸÉŸàÿßÿØ ÿßŸÑÿ±ŸÇŸÖŸäÿ© ŸÅŸàÿ± ÿ•ÿ™ŸÖÿßŸÖ ÿßŸÑÿØŸÅÿπ",
                        "ÿ™ÿ¨ÿ±ÿ®ÿ© ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ≥ŸÑÿ≥ÿ© ŸàŸÖÿ®ÿ≥ÿ∑ÿ© ŸÑŸÑÿßÿπÿ®ŸäŸÜ"
                    ],
                    challenges: "ÿ™ÿ∑ŸàŸäÿ± ÿ≥ŸÑÿ© ÿ∞ŸÉŸäÿ© ŸÖÿπ ŸÜÿßŸÅÿ∞ÿ© ÿØŸÅÿπ ÿ¢ŸÖŸÜÿ© Ÿàÿ≥ÿ±Ÿäÿπÿ© ÿ™ÿ∂ŸÖŸÜ ŸàÿµŸàŸÑ ÿßŸÑÿ£ŸÉŸàÿßÿØ ÿßŸÑÿ±ŸÇŸÖŸäÿ© ŸÅŸàÿ±Ÿãÿßÿå ŸÖÿπ ÿØŸÖÿ¨ ŸÇÿ≥ŸÖ ÿßŸÑÿ£ŸÑÿπÿßÿ® ÿ®ÿ∑ÿ±ŸäŸÇÿ© ÿ≥ŸáŸÑÿ© ŸÑŸÑÿ™ÿµŸÅÿ≠ ŸàÿßŸÑÿ¥ÿ±ÿßÿ°",
                    results: "ÿ™ÿ≥ŸáŸäŸÑ ÿ¥ÿ±ÿßÿ° ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ ŸàÿßŸÑÿ£ŸÑÿπÿßÿ® ÿßŸÑÿ±ŸÇŸÖŸäÿ©ÿå ÿ≤ŸäÿßÿØÿ© ÿ±ÿ∂ÿß ÿßŸÑÿπŸÖŸÑÿßÿ°ÿå Ÿàÿ™ÿ≠ÿ≥ŸäŸÜ ÿ≥ÿ±ÿπÿ© Ÿàÿßÿ≥ÿ™ŸÇÿ±ÿßÿ± ÿπŸÖŸÑŸäÿ© ÿßŸÑÿ¥ÿ±ÿßÿ°"
                }
            ],
            testimonials: [
                {
                    name: "ÿ≥ÿßÿ±ÿ© ÿ£ÿ≠ŸÖÿØ",
                    position: "ŸÖÿØŸäÿ± ÿßŸÑÿ™ÿ≥ŸàŸäŸÇ - ÿ¥ÿ±ŸÉÿ© ÿßŸÑŸÜÿ¨ÿßÿ≠",
                    text: "ÿπŸÖŸÑ ÿßÿ≥ÿßŸÖÿ© ÿ≤ŸäÿØ ÿ∞Ÿäÿßÿ® ÿπŸÑŸâ ÿ™ÿ∑ŸàŸäÿ± ŸÖŸàŸÇÿπŸÜÿß ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ŸÉÿßŸÜ ÿßÿ≥ÿ™ÿ´ŸÜÿßÿ¶ŸäÿßŸã. ÿßŸÑÿ™ÿµŸÖŸäŸÖ ÿ¨ŸÖŸäŸÑ ŸàÿßŸÑÿ£ÿØÿßÿ° ÿ≥ÿ±Ÿäÿπ ÿ¨ÿØÿßŸã. ŸÅÿ±ŸäŸÇŸÜÿß ŸàÿßŸÑÿπŸÖŸÑÿßÿ° ŸÖÿπÿ¨ÿ®ŸàŸÜ ÿ®ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©.",
                    image: "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face",
                    rating: 5
                },
                {
                    name: "ŸÖÿ≠ŸÖÿØ ÿßŸÑÿÆÿßŸÑÿØŸä",
                    position: "ŸÖÿ§ÿ≥ÿ≥ - ŸÖÿ™ÿ¨ÿ± ÿßŸÑÿ™ŸÇŸÜŸäÿ©",
                    text: "ÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑÿ™ÿ¨ÿßÿ±ÿ© ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿ© ÿßŸÑÿ∞Ÿä ÿ∑ŸàŸëÿ±Ÿá ÿßÿ≥ÿßŸÖÿ© ÿ≤ŸäÿØ ÿ∞Ÿäÿßÿ® ÿ≤ÿßÿØ ŸÖŸÜ ŸÖÿ®Ÿäÿπÿßÿ™ŸÜÿß ÿ®ŸÜÿ≥ÿ®ÿ© 200%. ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ÿ≥ŸáŸÑ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ Ÿàÿ¢ŸÖŸÜ ÿ™ŸÖÿßŸÖÿßŸã.",
                    image: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face",
                    rating: 5
                },
                {
                    name: "ŸÜŸàÿ± ÿßŸÑÿ•ÿ®ÿ±ÿßŸáŸäŸÖ",
                    position: "ŸÖÿØŸäÿ±ÿ© ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ - ÿ¥ÿ±ŸÉÿ© ÿßŸÑÿ•ÿ®ÿØÿßÿπ",
                    text: "ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßÿ≥ÿßŸÖÿ© ÿ≤ŸäÿØ ÿ∞Ÿäÿßÿ® ŸÉÿßŸÜ ŸÖŸÖÿ™ÿßÿ≤ÿßŸã. ŸäŸÑÿ™ÿ≤ŸÖ ÿ®ÿßŸÑŸÖŸàÿßÿπŸäÿØ ŸàŸäŸÇÿØŸÖ ÿ¨ŸàÿØÿ© ÿπÿßŸÑŸäÿ©. ÿ£ŸÜÿµÿ≠ ÿ®ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπŸá ŸÑÿ£Ÿä ŸÖÿ¥ÿ±Ÿàÿπ ÿ™ŸÇŸÜŸä.",
                    image: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face",
                    rating: 5
                }
            ],
            currentTestimonial: 0,
            typingTexts: [
                "ŸÖÿ∑Ÿàÿ± ŸàŸäÿ® ŸÖÿ≠ÿ™ÿ±ŸÅ",
                "ŸÖÿµŸÖŸÖ UI/UX ŸÖÿ®ÿØÿπ", 
                "ÿÆÿ®Ÿäÿ± ŸÅŸä React Ÿà Node.js",
                "ŸÖÿ∑Ÿàÿ± ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿ¨ŸàÿßŸÑ",
                "ŸÖÿ≥ÿ™ÿ¥ÿßÿ± ÿ™ŸÇŸÜŸä ŸÖÿ™ÿÆÿµÿµ"
            ],
            currentTypingIndex: 0,
            isAnimating: false
        };

        this.init();
    }

    init() {
        console.log('üöÄ Initializing Ahmed Portfolio...');
        
        // Wait for DOM to be fully ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                this.setupApp();
            });
        } else {
            this.setupApp();
        }
    }

    setupApp() {
        this.setupLoadingScreen();
        this.setupNavigation();
        this.setupThemeToggle();
        this.setupTypingAnimation();
        this.setupScrollAnimations();
        this.setupSkillsAnimation();
        this.setupProjectsFilter();
        this.setupTestimonialsCarousel();
        this.setupContactForm();
        this.setupMobileMenu();
        
        console.log('‚úÖ Ahmed Portfolio initialized successfully');
    }

    // Loading Screen
    setupLoadingScreen() {
        const loadingScreen = document.getElementById('loadingScreen');
        
        if (loadingScreen) {
            // Simulate loading time
            setTimeout(() => {
                loadingScreen.classList.add('hidden');
                this.startHeroAnimations();
            }, 3000);
        } else {
            // If no loading screen, start animations immediately
            setTimeout(() => {
                this.startHeroAnimations();
            }, 500);
        }
    }

    startHeroAnimations() {
        // Start counter animations
        this.animateCounters();
        
        // Start typing animation
        setTimeout(() => {
            this.startTypingAnimation();
        }, 1000);
    }

    // Navigation - FIXED VERSION
    setupNavigation() {
        const navLinks = document.querySelectorAll('.nav-link');
        const nav = document.getElementById('mainNav');
        
        console.log('üîó Setting up navigation with', navLinks.length, 'links');
        
        // FIXED: Proper scroll handling for nav active states
        window.addEventListener('scroll', () => {
            const scrollY = window.pageYOffset;
            
            // Add scrolled class to nav
            if (nav) {
                if (scrollY > 50) {
                    nav.classList.add('scrolled');
                } else {
                    nav.classList.remove('scrolled');
                }
            }
            
            // Update active nav link based on scroll position
            this.updateActiveNavLink(scrollY);
        });

        // FIXED: Click navigation with proper smooth scrolling
        navLinks.forEach((link, index) => {
            console.log(`üìå Setting up nav link ${index}:`, link.getAttribute('href'));
            
            link.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                console.log('üñ±Ô∏è Nav link clicked:', link.getAttribute('href'));
                
                const href = link.getAttribute('href');
                if (!href || !href.startsWith('#')) {
                    console.warn('Invalid href:', href);
                    return;
                }
                
                const sectionId = href.substring(1);
                const section = document.getElementById(sectionId);
                
                console.log('üéØ Looking for section:', sectionId, section ? '‚úÖ Found' : '‚ùå Not found');
                
                if (section) {
                    // Update active nav immediately for better UX
                    navLinks.forEach(l => l.classList.remove('active'));
                    link.classList.add('active');
                    
                    // Calculate scroll position
                    const navHeight = nav ? nav.offsetHeight : 80;
                    const sectionTop = section.offsetTop - navHeight - 20; // Extra padding
                    
                    console.log('üìè Scroll calculation:', {
                        sectionTop: section.offsetTop,
                        navHeight,
                        finalTop: sectionTop
                    });
                    
                    // Smooth scroll with fallback
                    try {
                        window.scrollTo({
                            top: Math.max(0, sectionTop),
                            behavior: 'smooth'
                        });
                        
                        console.log('‚úÖ Smooth scroll initiated to:', sectionTop);
                        this.showToast(`ÿßŸÜÿ™ŸÇÿßŸÑ ÿ•ŸÑŸâ ŸÇÿ≥ŸÖ ${link.textContent.trim()}`, 'info');
                        
                    } catch (error) {
                        console.warn('Smooth scroll failed, using fallback:', error);
                        // Fallback for older browsers
                        window.scrollTo(0, Math.max(0, sectionTop));
                    }
                    
                    // Close mobile menu if open
                    this.closeMobileMenu();
                } else {
                    console.error('‚ùå Section not found:', sectionId);
                    this.showToast('ÿßŸÑŸÇÿ≥ŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ', 'error');
                }
            });
        });
        
        console.log('‚úÖ Navigation setup complete');
    }

    updateActiveNavLink(scrollY) {
        const navLinks = document.querySelectorAll('.nav-link');
        const sections = document.querySelectorAll('section[id]');
        
        let activeSection = '';
        
        sections.forEach(section => {
            const sectionTop = section.offsetTop - 100;
            const sectionBottom = sectionTop + section.offsetHeight;
            
            if (scrollY >= sectionTop && scrollY < sectionBottom) {
                activeSection = section.id;
            }
        });
        
        navLinks.forEach(link => {
            const href = link.getAttribute('href');
            if (href && href === `#${activeSection}`) {
                link.classList.add('active');
            } else {
                link.classList.remove('active');
            }
        });
    }

    closeMobileMenu() {
        const navMenu = document.getElementById('navMenu');
        const navToggle = document.getElementById('navToggle');
        
        if (navMenu) navMenu.classList.remove('active');
        if (navToggle) navToggle.classList.remove('active');
    }

    // Theme Toggle
    setupThemeToggle() {
        const themeToggle = document.getElementById('themeToggle');
        
        if (themeToggle) {
            // Set initial theme
            const savedTheme = localStorage.getItem('theme') || 
                              (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
            
            document.documentElement.setAttribute('data-color-scheme', savedTheme);
            this.updateThemeIcon(savedTheme);
            
            themeToggle.addEventListener('click', () => {
                const currentTheme = document.documentElement.getAttribute('data-color-scheme');
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                
                document.documentElement.setAttribute('data-color-scheme', newTheme);
                localStorage.setItem('theme', newTheme);
                this.updateThemeIcon(newTheme);
                
                this.showToast(
                    `ÿ™ŸÖ ÿßŸÑÿ™ÿ®ÿØŸäŸÑ ÿ•ŸÑŸâ ${newTheme === 'dark' ? 'ÿßŸÑŸàÿ∂ÿπ ÿßŸÑŸÖÿ∏ŸÑŸÖ' : 'ÿßŸÑŸàÿ∂ÿπ ÿßŸÑŸÖÿ∂Ÿäÿ°'}`,
                    'info'
                );
            });
        }
    }

    updateThemeIcon(theme) {
        const themeIcon = document.querySelector('#themeToggle i');
        if (themeIcon) {
            themeIcon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
        }
    }

    // Typing Animation
    setupTypingAnimation() {
        this.typingElement = document.getElementById('typingText');
    }

    startTypingAnimation() {
        if (!this.typingElement) return;
        
        this.typeText(this.data.typingTexts[this.data.currentTypingIndex]);
    }

    async typeText(text) {
        if (!this.typingElement || this.data.isAnimating) return;
        
        this.data.isAnimating = true;
        
        // Clear existing text
        this.typingElement.textContent = '';
        
        // Type text
        for (let i = 0; i < text.length; i++) {
            this.typingElement.textContent += text[i];
            await this.delay(100);
        }
        
        // Wait
        await this.delay(2000);
        
        // Delete text
        for (let i = text.length; i > 0; i--) {
            this.typingElement.textContent = text.substring(0, i - 1);
            await this.delay(50);
        }
        
        // Next text
        this.data.currentTypingIndex = (this.data.currentTypingIndex + 1) % this.data.typingTexts.length;
        this.data.isAnimating = false;
        
        // Continue animation
        setTimeout(() => {
            this.startTypingAnimation();
        }, 500);
    }

    // Counter Animations
    animateCounters() {
        const counters = document.querySelectorAll('[data-count]');
        
        counters.forEach((counter, index) => {
            setTimeout(() => {
                const target = parseInt(counter.getAttribute('data-count'));
                this.animateNumber(counter, target);
            }, index * 200);
        });
    }

    animateNumber(element, target, duration = 2000) {
        const start = 0;
        const startTime = performance.now();
        
        const updateNumber = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            const easeProgress = this.easeOutQuart(progress);
            const current = Math.floor(start + (target - start) * easeProgress);
            
            element.textContent = current.toLocaleString('ar-SA');
            
            if (progress < 1) {
                requestAnimationFrame(updateNumber);
            }
        };
        
        requestAnimationFrame(updateNumber);
    }

    easeOutQuart(t) {
        return 1 - Math.pow(1 - t, 4);
    }

    // Scroll Animations
    setupScrollAnimations() {
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };
        
        this.observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.animation = 'fadeInUp 0.8s ease-out forwards';
                    
                    // Trigger skill animations if in skills section
                    if (entry.target.id === 'skills') {
                        this.animateSkills();
                    }
                }
            });
        }, observerOptions);
        
        // Observe sections
        const sections = document.querySelectorAll('section');
        sections.forEach(section => {
            this.observer.observe(section);
        });
        
        // Observe cards and elements
        const animatedElements = document.querySelectorAll(
            '.service-card, .project-card, .timeline-item, .skill-category'
        );
        animatedElements.forEach(element => {
            this.observer.observe(element);
        });
    }

    // Skills Animation
    setupSkillsAnimation() {
        this.skillsAnimated = false;
    }

    animateSkills() {
        if (this.skillsAnimated) return;
        this.skillsAnimated = true;
        
        const skillBars = document.querySelectorAll('.skill-progress');
        
        skillBars.forEach((bar, index) => {
            setTimeout(() => {
                const width = bar.getAttribute('data-width');
                bar.style.width = width + '%';
            }, index * 200);
        });
    }

    // Projects Filter
    setupProjectsFilter() {
        const filterButtons = document.querySelectorAll('.filter-btn');
        const projectCards = document.querySelectorAll('.project-card');
        
        filterButtons.forEach(button => {
            button.addEventListener('click', () => {
                const filter = button.getAttribute('data-filter');
                
                // Update active button
                filterButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                
                // Filter projects
                projectCards.forEach(card => {
                    const category = card.getAttribute('data-category');
                    
                    if (filter === 'all' || category === filter) {
                        card.style.display = 'block';
                        card.style.animation = 'fadeInUp 0.5s ease-out';
                    } else {
                        card.style.display = 'none';
                    }
                });
                
                this.showToast(`ÿ™ŸÖ ÿ™ÿµŸÅŸäÿ© ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ: ${button.textContent}`, 'info');
            });
        });
    }

    // Project Modal
    openProjectModal(projectIndex) {
        const project = this.data.projects[projectIndex];
        if (!project) return;
        
        const modal = document.getElementById('projectModal');
        const modalBody = document.getElementById('modalBody');
        
        if (!modal || !modalBody) return;
        
        modalBody.innerHTML = `
            <div style="padding: 2rem;">
                <img src="${project.image}" alt="${project.title}" 
                     style="width: 100%; height: 300px; object-fit: cover; border-radius: 8px; margin-bottom: 1.5rem;">
                
                <div style="margin-bottom: 1rem;">
                    <span style="background: var(--glass-bg); padding: 0.25rem 0.75rem; border-radius: 20px; 
                                font-size: 0.875rem; color: var(--portfolio-primary);">
                        ${project.category}
                    </span>
                    ${project.status ? `<span class="status-badge status-badge--danger">${project.status}</span>` : ''}
                </div>
                
                <h2 style="color: var(--color-text); margin-bottom: 1rem; font-size: 1.75rem;">
                    ${project.title}
                </h2>
                
                <p style="color: var(--color-text-secondary); line-height: 1.6; margin-bottom: 1.5rem;">
                    ${project.description}
                </p>
                
                <div style="margin-bottom: 1.5rem;">
                    <h4 style="color: var(--color-text); margin-bottom: 0.75rem;">ÿßŸÑÿ™ŸÇŸÜŸäÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖÿ©:</h4>
                    <div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
                        ${project.tech.map(tech => `
                            <span style="background: var(--gradient-primary); color: white; 
                                        padding: 0.25rem 0.75rem; border-radius: 20px; font-size: 0.875rem;">
                                ${tech}
                            </span>
                        `).join('')}
                    </div>
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <h4 style="color: var(--color-text); margin-bottom: 0.75rem;">ÿßŸÑŸÖŸäÿ≤ÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©:</h4>
                    <ul style="color: var(--color-text-secondary); line-height: 1.6; padding-right: 1.25rem;">
                        ${project.features.map(feature => `<li style="margin-bottom: 0.5rem;">${feature}</li>`).join('')}
                    </ul>
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <h4 style="color: var(--color-text); margin-bottom: 0.75rem;">ÿßŸÑÿ™ÿ≠ÿØŸäÿßÿ™:</h4>
                    <p style="color: var(--color-text-secondary); line-height: 1.6;">
                        ${project.challenges}
                    </p>
                </div>
                
                <div>
                    <h4 style="color: var(--color-text); margin-bottom: 0.75rem;">ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨:</h4>
                    <p style="color: var(--color-text-secondary); line-height: 1.6;">
                        ${project.results}
                    </p>
                </div>
                
                ${project.link ? `
                <div style="margin-top: 2rem; display: flex; gap: 0.75rem;">
                    <a href="${project.link}" target="_blank" rel="noopener" 
                       style="display: inline-flex; align-items: center; gap: 0.5rem; background: var(--portfolio-primary); color: white; padding: 0.75rem 1rem; border-radius: 8px; text-decoration: none;">
                        <i class="fas fa-external-link-alt"></i>
                        ÿ¨ÿ±Ÿëÿ® ÿßŸÑÿ¢ŸÜ
                    </a>
                    <button onclick="closeProjectModal()" 
                            style="background: var(--glass-bg); color: var(--color-text); padding: 0.75rem 1rem; border-radius: 8px; border: none; cursor: pointer;">
                        ÿ•ÿ∫ŸÑÿßŸÇ
                    </button>
                </div>
                ` : ''}
            </div>
        `;
        
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
    }

    closeProjectModal() {
        const modal = document.getElementById('projectModal');
        if (modal) {
            modal.classList.add('hidden');
            document.body.style.overflow = 'auto';
        }
    }

    // Testimonials Carousel
    setupTestimonialsCarousel() {
        this.createTestimonialDots();
        this.setupCarouselControls();
        this.startAutoSlide();
    }

    createTestimonialDots() {
        const dotsContainer = document.getElementById('testimonialDots');
        if (!dotsContainer) return;
        
        dotsContainer.innerHTML = '';
        
        this.data.testimonials.forEach((_, index) => {
            const dot = document.createElement('div');
            dot.className = `carousel-dot ${index === 0 ? 'active' : ''}`;
            dot.addEventListener('click', () => this.goToTestimonial(index));
            dotsContainer.appendChild(dot);
        });
    }

    setupCarouselControls() {
        const prevBtn = document.getElementById('prevTestimonial');
        const nextBtn = document.getElementById('nextTestimonial');
        
        if (prevBtn) {
            prevBtn.addEventListener('click', () => this.previousTestimonial());
        }
        
        if (nextBtn) {
            nextBtn.addEventListener('click', () => this.nextTestimonial());
        }
    }

    goToTestimonial(index) {
        const testimonials = document.querySelectorAll('.testimonial-card');
        const dots = document.querySelectorAll('.carousel-dot');
        
        // Update testimonials
        testimonials.forEach((testimonial, i) => {
            testimonial.classList.toggle('active', i === index);
        });
        
        // Update dots
        dots.forEach((dot, i) => {
            dot.classList.toggle('active', i === index);
        });
        
        this.data.currentTestimonial = index;
    }

    nextTestimonial() {
        const nextIndex = (this.data.currentTestimonial + 1) % this.data.testimonials.length;
        this.goToTestimonial(nextIndex);
    }

    previousTestimonial() {
        const prevIndex = this.data.currentTestimonial === 0 
            ? this.data.testimonials.length - 1 
            : this.data.currentTestimonial - 1;
        this.goToTestimonial(prevIndex);
    }

    startAutoSlide() {
        setInterval(() => {
            this.nextTestimonial();
        }, 5000);
    }

    // Contact Form
    setupContactForm() {
        const form = document.getElementById('contactForm');
        if (!form) return;
        
        // Initialize EmailJS
        this.initializeEmailJS();
        
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleFormSubmit(form);
        });
        
        // Real-time validation
        const inputs = form.querySelectorAll('.form-control');
        inputs.forEach(input => {
            input.addEventListener('blur', () => this.validateField(input));
            input.addEventListener('input', () => this.clearFieldError(input));
        });
    }

    // Initialize EmailJS
    initializeEmailJS() {
        // EmailJS configuration - replace with your actual service ID
        // Get your public key from EmailJS dashboard: https://dashboard.emailjs.com/admin/integration
        emailjs.init("iYbMaC9BUXhCgMfkx"); // EmailJS public key
    }

    validateField(field) {
        const value = field.value.trim();
        const fieldName = field.getAttribute('name');
        const errorElement = field.parentNode.querySelector('.form-error');
        
        let isValid = true;
        let errorMessage = '';
        
        // Required validation
        if (!value) {
            isValid = false;
            errorMessage = 'Ÿáÿ∞ÿß ÿßŸÑÿ≠ŸÇŸÑ ŸÖÿ∑ŸÑŸàÿ®';
        }
        
        // Email validation
        if (fieldName === 'email' && value) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(value)) {
                isValid = false;
                errorMessage = 'Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ÿ®ÿ±ŸäÿØ ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ÿµÿ≠Ÿäÿ≠';
            }
        }
        
        // Name validation
        if (fieldName === 'name' && value) {
            if (value.length < 2) {
                isValid = false;
                errorMessage = 'ÿßŸÑÿßÿ≥ŸÖ Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ ÿ≠ÿ±ŸÅŸäŸÜ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ';
            }
        }
        
        // Update UI
        if (!isValid) {
            field.classList.add('error');
            if (errorElement) {
                errorElement.textContent = errorMessage;
            }
        } else {
            field.classList.remove('error');
            if (errorElement) {
                errorElement.textContent = '';
            }
        }
        
        return isValid;
    }

    clearFieldError(field) {
        field.classList.remove('error');
        const errorElement = field.parentNode.querySelector('.form-error');
        if (errorElement) {
            errorElement.textContent = '';
        }
    }

    async handleFormSubmit(form) {
        const inputs = form.querySelectorAll('.form-control');
        let isFormValid = true;
        
        // Validate all fields
        inputs.forEach(input => {
            if (!this.validateField(input)) {
                isFormValid = false;
            }
        });
        
        if (!isFormValid) {
            this.showToast('Ÿäÿ±ÿ¨Ÿâ ÿ™ÿµÿ≠Ÿäÿ≠ ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° ŸÅŸä ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨', 'error');
            return;
        }
        
        // Get form data
        const formData = new FormData(form);
        const data = {
            from_name: formData.get('name'),
            from_email: formData.get('email'),
            subject: formData.get('subject'),
            message: formData.get('message'),
            to_email: 'zaiddzaid666@gmail.com' // Your email address
        };
        
        // Show loading state
        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ•ÿ±ÿ≥ÿßŸÑ...';
        submitBtn.disabled = true;
        
        try {
            // Send email using EmailJS
            // EmailJS configuration is now complete
            const result = await emailjs.send(
                'service_2qpq3wr', // EmailJS service ID
                'template_6qso35c', // EmailJS template ID
                data
            );
            
            console.log('Email sent successfully:', result);
            
            // Success
            this.showToast('ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßŸÑÿ™ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠! ÿ≥ÿ£ÿ™ŸàÿßÿµŸÑ ŸÖÿπŸÉ ŸÇÿ±Ÿäÿ®ÿßŸã', 'success');
            form.reset();
            
        } catch (error) {
            console.error('Email sending error:', error);
            
            // Check if it's a configuration error
            if (error.text && error.text.includes('Invalid')) {
                this.showToast('ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä. Ÿäÿ±ÿ¨Ÿâ ŸÖÿ±ÿßÿ¨ÿπÿ© ÿßŸÑŸÖÿ∑Ÿàÿ±', 'error');
            } else {
                this.showToast('ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ', 'error');
            }
        } finally {
            // Restore button state
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    }

    // Mobile Menu
    setupMobileMenu() {
        const navToggle = document.getElementById('navToggle');
        const navMenu = document.getElementById('navMenu');
        
        if (navToggle && navMenu) {
            navToggle.addEventListener('click', () => {
                navToggle.classList.toggle('active');
                navMenu.classList.toggle('active');
            });
            
            // Close menu when clicking outside
            document.addEventListener('click', (e) => {
                if (!navToggle.contains(e.target) && !navMenu.contains(e.target)) {
                    this.closeMobileMenu();
                }
            });
        }
    }

    // Utility Functions
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    showToast(message, type = 'info') {
        let container = document.getElementById('toastContainer');
        
        if (!container) {
            container = document.createElement('div');
            container.id = 'toastContainer';
            container.className = 'toast-container';
            document.body.appendChild(container);
        }
        
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        
        const icons = {
            success: 'fa-check-circle',
            error: 'fa-exclamation-circle',
            info: 'fa-info-circle'
        };
        
        toast.innerHTML = `
            <i class="fas ${icons[type]}"></i>
            <span>${message}</span>
        `;
        
        container.appendChild(toast);
        
        // Auto remove after 4 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.style.animation = 'slideInLeft 0.3s ease-out reverse';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.remove();
                    }
                }, 300);
            }
        }, 4000);
    }
}

// Global functions for HTML onclick handlers
function openProjectModal(index) {
    if (window.portfolio) {
        window.portfolio.openProjectModal(index);
    }
}

function closeProjectModal() {
    if (window.portfolio) {
        window.portfolio.closeProjectModal();
    }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    console.log('üåü DOM loaded - initializing portfolio...');
    window.portfolio = new AhmedPortfolio();
    
    // Make functions globally available
    window.openProjectModal = openProjectModal;
    window.closeProjectModal = closeProjectModal;
    
    console.log('üéâ Portfolio ready!');
});

// Additional safety: initialize on window load if not already initialized
window.addEventListener('load', () => {
    if (!window.portfolio) {
        console.log('üîÑ Backup initialization...');
        window.portfolio = new AhmedPortfolio();
        window.openProjectModal = openProjectModal;
        window.closeProjectModal = closeProjectModal;
    }
});

console.log('üöÄ Ahmed Ibrahim Portfolio - Professional Web Developer & UI/UX Designer - Navigation Fixed!');